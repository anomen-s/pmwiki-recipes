!!! Agorithm description
!!!!Encryption steps
: padding : plaintext is padded with spaces to achieve length of multiple of $AesCryptPadding
: nonce : pseudo-random 64bit nonce is generated
: counter : 64bit counter is set to zero
: key derivation : key is computed from password and possibly nonce (see below)
: encryption : plaintext is encrypted using AES-256 in CTR mode
: output : Base64-encoded concatenation of nonce and ciphertext

!!!!Decryption steps
: input : Base64-decode and split input to nonce and ciphertext
: counter : 64bit counter is set to zero
: key derivation : key is computed from password and possibly nonce (see below)
: decryption : ciphertext is decrypted using AES-256 in CTR mode
: trim : plaintext is trimmed

!!!KDF functions
Function is selected by $AesCryptKDF variable.
Possible values are:
: sha256 : SHA-256 hash of password
: sha256_dup : SHA-256 hash of longer text constructed using password and nonce
: aes : encrypt password with AES, compatible with original aescrypt-0.1 recipe
: custom : custom KDF function. Details described in subchapter later.

!!!! sha256_dup
Input for SHA-256 hashing is constructed using following JavaScript code:

[@
   var buffer = '';
   var nBytes = nBits/8;
   var nonceEnc = Base64.encode(nonce);
   for (var i = 0; i < nBytes ; i++) {
     buffer = buffer.concat(i, password.charAt(i % password.length), password, nonceEnc);
   }
   var hash = Sha256.hash(buffer);
   return hash.slice(0, nBytes);
@]

For example, "TopSecret" password and nonce "+u3lTovF4nE=" (in base64) produce (line breaks added for clarity):

[@
0TTopSecret+u3lTovF4nE=1oTopSecret+u3lTovF4nE=2pTopSecret+u3lTovF4nE=
3STopSecret+u3lTovF4nE=4eTopSecret+u3lTovF4nE=5cTopSecret+u3lTovF4nE=
6rTopSecret+u3lTovF4nE=7eTopSecret+u3lTovF4nE=8tTopSecret+u3lTovF4nE=
9TTopSecret+u3lTovF4nE=10oTopSecret+u3lTovF4nE=11pTopSecret+u3lTovF4nE=
12STopSecret+u3lTovF4nE=13eTopSecret+u3lTovF4nE=14cTopSecret+u3lTovF4nE=
15rTopSecret+u3lTovF4nE=16eTopSecret+u3lTovF4nE=17tTopSecret+u3lTovF4nE=
18TTopSecret+u3lTovF4nE=19oTopSecret+u3lTovF4nE=20pTopSecret+u3lTovF4nE=
21STopSecret+u3lTovF4nE=22eTopSecret+u3lTovF4nE=23cTopSecret+u3lTovF4nE=
24rTopSecret+u3lTovF4nE=25eTopSecret+u3lTovF4nE=26tTopSecret+u3lTovF4nE=
27TTopSecret+u3lTovF4nE=28oTopSecret+u3lTovF4nE=29pTopSecret+u3lTovF4nE=
30STopSecret+u3lTovF4nE=31eTopSecret+u3lTovF4nE=
@]

!!!! Custom key derivation function
* use following template to create code which shall be inserted into @@local/config.php@@
[@
$AesCryptKDF='custom';
$AesCryptKDFJSCode = "
AesCtr.kdf_custom = function(password, nBits, nonce) {

   var hash;
   // insert custom derivation function here
   // params:
   //   password - password given by user
   //   nBits - AES variant, always 256
   //   nonce - string of length 8 containing nonce, can be used as salt
   return hash;
}
";
include_once("$FarmD/cookbook/aescrypt.php");
@]

!!Links
* http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation


!!Java testing application
Build application using Maven:

 mvn install

Use following command to start command-line interface:

 java -jar JavaAesCryptTest-jar-with-dependencies.jar

Note: GUI interface is not yet implemented.

!!Test ciphers
Here are some test ciphers (mode/Password/Text/ciphertext):

sha256/TopSecret/test5:
fEaxTorFYjFnA33Bu5kRcw==


sha256_dup/TopSecret/test123456789:
+u3lTovF4nFv8dYNIaXjinWylW/W/6Sw


aes/TopSecret/test1234:
luTlTuHh4eHrEPklnMfcAb70

aes/TopSecret/zkouÅ¡ka:
4OTlTtTU1NSvedV6iKTpxy5G

aes/testing1234/Encrypt this text:
CuXlTpiYmJgivaCAyM1nGHjC/T3jUhHhoLXz
